version: 2.1

parameters:
  nightly-version:
    type: string
    default: "nightly-2022-06-23"

executors:
  default:
    docker:
      - image: dignifiedquire/iroh-ci:latest
    working_directory: ~/ci
    resource_class: xlarge

restore-workspace: &restore-workspace
  attach_workspace:
    at: ~/

restore-cache: &restore-cache
  restore_cache:
    keys:
      - cargo-v5-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - repo-source-{{ .Branch }}-{{ .Revision }}

commands:
  set-env-path:
    steps:
      - run:
          name: Set the PATH env variable
          command: |
            # Also put the Rust LLVM tools into the PATH.
            echo 'export PATH="$HOME:~/.cargo/bin:~/.rustup/toolchains/<< pipeline.parameters.nightly-version >>-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/bin:$PATH"' | tee --append $BASH_ENV
            source $BASH_ENV


  setup-sccache:
    steps:
      - run:
          name: Install sccache
          command: |
            cargo install sccache
            # This configures Rust to use sccache.
            echo 'export "RUSTC_WRAPPER"="sccache"' >> $BASH_ENV
            # This is the maximum space sccache cache will use on disk.
            echo 'export "SCCACHE_CACHE_SIZE"="1G"' >> $BASH_ENV
            sccache --version
  restore-sccache-cache:
    steps:
      - restore_cache:
          name: Restore sccache cache
          key: sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
  save-sccache-cache:
    steps:
      - save_cache:
          name: Save sccache cache
          # We use {{ epoch }} to always upload a fresh cache:
          # Of course, restore_cache will not find this exact key,
          # but it will fall back to the closest key (aka the most recent).
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          paths:
            - "~/.cache/sccache"

jobs:
  cargo_fetch:
    executor: default
    steps:
      - checkout
      - set-env-path
      - run: echo $HOME
      - run: cargo --version
      - run: rustc --version
      - run:
          name: Update submodules
          command: git submodule update --init --recursive
      - run:
          name: Calculate dependencies
          command: cargo generate-lockfile
      - restore_cache:
          keys:
            - cargo-v5-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - run: cargo update
      - run: cargo fetch
      - run: rustup install $(cat rust-toolchain)
      - run: rustup default $(cat rust-toolchain)
      # A nightly build is needed for code coverage reporting
      - run: rustup toolchain install --profile minimal << pipeline.parameters.nightly-version >>
      - run: rustup component add --toolchain << pipeline.parameters.nightly-version >> llvm-tools-preview
      - run: rustc --version
      - setup-sccache
      - persist_to_workspace:
          root: ~/
          paths:
            - ci
      - save_cache:
          key: cargo-v5-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
          paths:
            - "~/.cargo"
            - "~/.rustup"

  test:
    executor: default
    parameters:
      cargo-args:
        description: Addtional arguments for the cargo command
        type: string
        default: ""
    environment:
      RUST_LOG: debug
    steps:
      - set-env-path
      - *restore-workspace
      - *restore-cache
      - setup-sccache
      - restore-sccache-cache
      - run:
          name: Test with << parameters.cargo-args >>
          command: cargo test << parameters.cargo-args >>
      - save-sccache-cache

  rustfmt:
    executor: default
    steps:
      - set-env-path
      - *restore-workspace
      - *restore-cache
      - setup-sccache
      - restore-sccache-cache
      - run:
          name: Run cargo fmt
          command: cargo fmt --all -- --check
      - save-sccache-cache

  clippy:
    executor: default
    environment:
      RUST_LOG: debug
    steps:
      - set-env-path
      - *restore-workspace
      - *restore-cache
      - setup-sccache
      - restore-sccache-cache
      - run:
          name: Run cargo clippy (default features)
          command: cargo clippy --all --all-targets -- -D warnings
      - save-sccache-cache

workflows:
  version: 2.1

  test:
    jobs:
      - cargo_fetch
      - rustfmt:
          requires:
            - cargo_fetch
      - clippy:
          requires:
            - cargo_fetch
      - test:
          name: "Test linxu:x86_64"
          cargo-args: "--workspace"
          requires:
            - cargo_fetch
      - test:
          name: "Test linux:x86_64 (no default features)"
          cargo-args: "--workspace --no-default-features"
          requires:
            - cargo_fetch
