version: 2.1

parameters:
  nightly-version:
    type: string
    default: "nightly-2022-06-23"

orbs: 
  aws-cli: circleci/aws-cli@3.1.1

executors:
  default:
    machine:
      image: ubuntu-2004:current
    working_directory: ~/ci
    resource_class: large
  mac-executor:
    macos:
      xcode: 13.4.1
    working_directory: ~/ci
    resource_class: medium
  docker-executor:
    docker:
      - image: dignifiedquire/iroh-ci:latest
    working_directory: ~/ci
    resource_class: xlarge

restore-workspace: &restore-workspace
  attach_workspace:
    at: ~/

restore-cache: &restore-cache
  restore_cache:
    keys:
      - cargo-v5-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - repo-source-{{ .Branch }}-{{ .Revision }}

commands:
  setup-env:
    steps:
      - run:
          name: setup deps
          command: |
            sudo apt-get update && \
            sudo apt-get install -y \
            cmake pkg-config libssl-dev git gcc build-essential git clang libclang-dev \
            make curl openssh-client \
            autoconf automake cmake libtool libcurl4-openssl-dev libssl-dev \
            libelf-dev libdw-dev binutils-dev zlib1g-dev libiberty-dev wget \
            xz-utils pkg-config python
      - run:
          name: setup rust
          command: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            echo 'export PATH="$PATH:/root/.cargo/bin"' >> $BASH_ENV
            echo 'export RUSTFLAGS="-C link-dead-code"' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: setup ld
          command: |
            sudo bash -l -c 'echo $(rustc --print sysroot)/lib >> /etc/ld.so.conf'
            sudo bash -l -c 'echo /usr/local/lib >> /etc/ld.so.conf'
            sudo ldconfig

  setup-env-mac:
    steps:
      - run:
          name: setup deps
          command: |
            if ! which brew >/dev/null 2>&1; then
              /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
            fi

            brew update
            brew install openssl cmake llvm
      - run:
          name: setup rust
          command: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            echo 'export PATH="$PATH:/root/.cargo/bin"' >> $BASH_ENV
            echo 'export RUSTFLAGS="-C link-dead-code"' >> $BASH_ENV
            source $BASH_ENV
      # - run:
      #     name: setup ld
      #     command: |
      #       sudo bash -l -c 'echo $(rustc --print sysroot)/lib >> /etc/ld.so.conf'
      #       sudo bash -l -c 'echo /usr/local/lib >> /etc/ld.so.conf'
      #       sudo ldconfig

  setup-protoc:
    steps:
      - run:
          name: setup protoc
          command: |
            PROTOC_VERSION=3.20.1
            PROTOC_ZIP=protoc-$PROTOC_VERSION-linux-x86_64.zip
            curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v$PROTOC_VERSION/$PROTOC_ZIP
            sudo unzip -o $PROTOC_ZIP -d /usr/local bin/protoc
            sudo unzip -o $PROTOC_ZIP -d /usr/local 'include/*'
            rm -f $PROTOC_ZIP
            echo 'export PROTOC=/usr/local/bin/protoc' >> $BASH_ENV
            echo 'export PROTOC_INCLUDE=/usr/local/include' >> $BASH_ENV
            source $BASH_ENV
    
  setup-protoc-mac:
    steps:
      - run:
          name: setup protoc
          command: |
            PROTOC_VERSION=3.20.1
            PROTOC_ZIP=protoc-$PROTOC_VERSION-osx-x86_64.zip
            curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v$PROTOC_VERSION/$PROTOC_ZIP
            sudo unzip -o $PROTOC_ZIP -d /usr/local bin/protoc
            sudo unzip -o $PROTOC_ZIP -d /usr/local 'include/*'
            rm -f $PROTOC_ZIP
            echo 'export PROTOC=/usr/local/bin/protoc' >> $BASH_ENV
            echo 'export PROTOC_INCLUDE=/usr/local/include' >> $BASH_ENV
            source $BASH_ENV

  set-env-path:
    steps:
      - run:
          name: Set the PATH env variable
          command: |
            # Also put the Rust LLVM tools into the PATH.
            echo 'export PATH="$HOME:~/.cargo/bin:~/.rustup/toolchains/<< pipeline.parameters.nightly-version >>-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/bin:$PATH"' >> $BASH_ENV
            source $BASH_ENV


  setup-sccache:
    steps:
      - run:
          name: Install sccache
          command: |
            cargo install sccache
            # This configures Rust to use sccache.
            echo 'export "RUSTC_WRAPPER"="sccache"' >> $BASH_ENV
            # This is the maximum space sccache cache will use on disk.
            echo 'export "SCCACHE_CACHE_SIZE"="4G"' >> $BASH_ENV
            sccache --version
  restore-sccache-cache:
    steps:
      - restore_cache:
          name: Restore sccache cache
          key: sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
  save-sccache-cache:
    steps:
      - save_cache:
          name: Save sccache cache
          # We use {{ epoch }} to always upload a fresh cache:
          # Of course, restore_cache will not find this exact key,
          # but it will fall back to the closest key (aka the most recent).
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          paths:
            - "~/.cache/sccache"
    
  push-to-s3:
    parameters:
      version:
        default: "latest"
        type: string
      path:
        default: "./target/release/"
        type: string
      os:
        default: "linux"
        type: string
      arch:
        default: "amd64"
        type: string
    steps:
      - run:
          name: push to s3
          command: |
              source $BASH_ENV
              aws s3 cp <<parameters.path>>iroh-gateway s3://vorc/iroh-gateway-<<parameters.os>>-<<parameters.arch>>-${CIRCLE_SHA1::7} --no-progress
              aws s3 cp <<parameters.path>>iroh-p2p s3://vorc/iroh-p2p-<<parameters.os>>-<<parameters.arch>>-${CIRCLE_SHA1::7} --no-progress
              aws s3 cp <<parameters.path>>iroh-store s3://vorc/iroh-store-<<parameters.os>>-<<parameters.arch>>-${CIRCLE_SHA1::7} --no-progress

  push-to-s3-latest:
    parameters:
      path:
        default: "./target/release/"
        type: string
      os:
        default: "linux"
        type: string
      arch:
        default: "amd64"
        type: string
    steps:
      - run:
          name: push to s3 latest
          command: |
              source $BASH_ENV
              aws s3 cp <<parameters.path>>iroh-gateway s3://vorc/iroh-gateway-<<parameters.os>>-<<parameters.arch>>-latest --no-progress
              aws s3 cp <<parameters.path>>iroh-p2p s3://vorc/iroh-p2p-<<parameters.os>>-<<parameters.arch>>-latest --no-progress
              aws s3 cp <<parameters.path>>iroh-store s3://vorc/iroh-store-<<parameters.os>>-<<parameters.arch>>-latest --no-progress


jobs:
  cargo_fetch:
    executor: docker-executor
    steps:
      - checkout
      # - setup-env
      # - setup-protoc
      - set-env-path
      - run: echo $HOME
      - run: cargo --version
      - run: rustc --version
      - run:
          name: Update submodules
          command: git submodule update --init --recursive
      - run:
          name: Calculate dependencies
          command: cargo generate-lockfile
      - restore_cache:
          keys:
            - cargo-v5-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - run: cargo update
      - run: cargo fetch
      - run: rustup install $(cat rust-toolchain)
      - run: rustup default $(cat rust-toolchain)
      # A nightly build is needed for code coverage reporting
      - run: rustup toolchain install --profile minimal << pipeline.parameters.nightly-version >>
      - run: rustup component add --toolchain << pipeline.parameters.nightly-version >> llvm-tools-preview
      - run: rustc --version
      - setup-sccache
      - persist_to_workspace:
          root: ~/
          paths:
            - ci
      - save_cache:
          key: cargo-v5-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
          paths:
            - "~/.cargo"
            - "~/.rustup"

  test:
    executor: docker-executor
    parameters:
      cargo-args:
        description: Addtional arguments for the cargo command
        type: string
        default: ""
    environment:
      RUST_LOG: debug
    steps:
      - set-env-path
      - *restore-workspace
      - *restore-cache
      - setup-sccache
      - restore-sccache-cache
      - run:
          name: Test with << parameters.cargo-args >>
          command: cargo test << parameters.cargo-args >> -j 4
      - save-sccache-cache

  rustfmt:
    executor: docker-executor
    steps:
      - set-env-path
      - *restore-workspace
      - *restore-cache
      - setup-sccache
      - restore-sccache-cache
      - run:
          name: Run cargo fmt
          command: cargo fmt --all -- --check
      - save-sccache-cache

  clippy:
    executor: docker-executor
    environment:
      RUST_LOG: debug
    steps:
      - set-env-path
      - *restore-workspace
      - *restore-cache
      - setup-sccache
      - restore-sccache-cache
      - run:
          name: Run cargo clippy (default features)
          command: cargo clippy --all --all-targets -- -D warnings
      - save-sccache-cache

  build_release:
    executor: default
    steps:
      - checkout
      - setup-env
      - setup-protoc
      - set-env-path
      - setup-sccache
      - restore-sccache-cache
      - run:
          name: Install cargo cross
          command: |
            set -x
            CROSS=/home/circleci/.cargo/bin/cross
            if [ -f "$CROSS" ]; then
              echo "cargo cross already installed"
            else
              cargo install cross
            fi
      - aws-cli/setup:
          profile-name: default
      - run:
          name: build x86_64_linux
          command: cargo build --release
      # - run:
      #     name: get iroh versions
      #     command: |
      #       pkv=$(cargo pkgid iroh-gateway)
      #       IFS='#' read -ra res \<<< "$pkv"
      #       echo 'export IROH_GATEWAY_VERSION=${res[1]}' >> $BASH_ENV
      #       pkv=$(cargo pkgid iroh-p2p)
      #       IFS='#' read -ra res \<<< "$pkv"
      #       echo 'export IROH_P2P_VERSION=${res[1]}' >> $BASH_ENV
      #       pkv=$(cargo pkgid iroh-store)
      #       IFS='#' read -ra res \<<< "$pkv"
      #       echo 'export IROH_STORE_VERSION=${res[1]}' >> $BASH_ENV
      #       source $BASH_ENV
      - push-to-s3:
          path: ./target/release/
          os: linux
          arch: amd64
      - push-to-s3-latest:
          path: ./target/release/
          os: linux
          arch: amd64
      - run:
          name: build aarch64_linux
          command: cross build --release -v --target aarch64-unknown-linux-musl
      - push-to-s3:
          path: ./target/aarch64-unknown-linux-musl/release/
          os: linux
          arch: aarch64
      - push-to-s3-latest:
          path: ./target/aarch64-unknown-linux-musl/release/
          os: linux
          arch: aarch64
      - save-sccache-cache

  build_release_osx:
    executor: mac-executor
    steps:
      - checkout
      - setup-env-mac
      - setup-protoc-mac
      # - set-env-path
      - setup-sccache
      - restore-sccache-cache
      - aws-cli/setup:
          profile-name: default
      - run:
          name: build x86_64_darwin
          command: cargo build --release
      - push-to-s3:
          path: ./target/release/
          os: darwin
          arch: x86_64
      - push-to-s3-latest:
          path: ./target/release/
          os: darwin
          arch: x86_64
      - save-sccache-cache


workflows:
  version: 2.1

  iroh-ci-cd:
    jobs:
      - cargo_fetch
      - rustfmt:
          requires:
            - cargo_fetch
      - clippy:
          requires:
            - cargo_fetch
      - test:
          name: "Test linux:x86_64"
          cargo-args: "--workspace"
          requires:
            - cargo_fetch
      - test:
          name: "Test linux:x86_64 (no default features)"
          cargo-args: "--workspace --no-default-features"
          requires:
            - cargo_fetch
      - build_release:
          name: "build linux release"
          context: aws_s3
          filters:
            branches:
              only: main
      - build_release_osx:
          name: "build mac release"
          context: aws_s3
          # filters:
          #   branches:
          #     only: main
