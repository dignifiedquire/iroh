name: Continuous integration

on:
  pull_request:
  push:
    branches:
      - main
      - staging
      - trying

jobs:
  build_and_test:
    name: Build and test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        rust: [nightly, stable]
        include:
          - os: ubuntu-latest
            sccache-path: /home/runner/.cache/sccache
          - os: macos-latest
            sccache-path: /Users/runner/Library/Caches/Mozilla.sccache
          - os: windows-latest
            sccache-path: "%LOCALAPPDATA%\\sccache"
    env:
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
      RUSTV: ${{ matrix.rust }}
      SCCACHE_CACHE_SIZE: 2G

      # SCCACHE_RECACHE: 1 # Uncomment this to clear cache, then comment it back out
    steps:
    - uses: actions/checkout@master
    - name: Set sccache env path
      if: matrix.os != 'windows-latest'
      run: |
          echo "SCCACHE_DIR=${{ matrix.sccache-path }}" >> $GITHUB_ENV
    - name: Set windows arch
      if: matrix.os == 'windows-latest'
      run: |
          echo "RELEASE_ARCH=windows" >> $GITHUB_ENV
    - name: Set linux arch
      if: matrix.os == 'ubuntu-latest'
      run: |
          echo "RELEASE_ARCH=linux" >> $GITHUB_ENV
    - name: Set macOS arch
      if: matrix.os == 'macos-latest'
      run: |
          echo "RELEASE_ARCH=darwin" >> $GITHUB_ENV
    - name: Install sccache (ubuntu-latest)
      if: matrix.os == 'ubuntu-latest'
      env:
        LINK: https://github.com/mozilla/sccache/releases/download
        SCCACHE_VERSION: v0.2.15
      run: |
        SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl
        mkdir -p $HOME/.local/bin
        curl -L "$LINK/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz" | tar xz
        mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
        chmod 755 $HOME/.local/bin/sccache
        echo "$HOME/.local/bin" >> $GITHUB_PATH  
    - name: Install LLVM and Clang # required for bindgen to work, see https://github.com/rust-lang/rust-bindgen/issues/1797
      uses: KyleMayes/install-llvm-action@32c4866ebb71e0949e8833eb49beeebed48532bd
      if: matrix.os == 'windows-latest'
      with:
        version: "11.0"
        directory: ${{ runner.temp }}/llvm
    - name: Set LIBCLANG_PATH
      run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
      if: matrix.os == 'windows-latest'     
    - name: Install scoop (windows-latest)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
        iwr -useb get.scoop.sh -outfile 'install.ps1'
        .\\install.ps1 -RunAsAdmin
        Join-Path (Resolve-Path ~).Path "scoop\shims" >> $Env:GITHUB_PATH
    - name: Install sccache (windows-latest)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: scoop install sccache
    - name: Install sccache (macos-latest)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install sccache          
    - name: Install ${{ matrix.rust }}
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        override: true
    
    - name: Cache cargo registry
      uses: actions/cache@v2
      continue-on-error: false
      with:
        path: |
          ~/.cargo/registry          
          ~/.cargo/bin
          ~/.cargo/registry/index
          ~/.cargo/registry/cache
          ~/.cargo/git
          ~/.cargo/.crates.toml
          ~/.cargo/.crates2.json
          ./target
            
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
                      ${{ runner.os }}-${{ matrix.rust }}-cargo-
    - name: Save sccache
      uses: actions/cache@v2
      continue-on-error: false
      with:
        path: ${{ matrix.sccache-path }}
        key: ${{ runner.os }}-${{ matrix.rust }}-sccache-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
                      ${{ runner.os }}-${{ matrix.rust }}-sccache-
    - name: Start sccache server
      run: sccache --start-server

    - name: Install Protoc
      uses: arduino/setup-protoc@v1

    - name: configure windows 
      uses: ilammy/msvc-dev-cmd@v1.4.1
      if: matrix.os == 'windows-latest'

    - name: check
      uses: actions-rs/cargo@v1
      with:
        command: check
        args: --all --bins --tests --examples

    - name: check bench
      uses: actions-rs/cargo@v1
      if: matrix.rust == 'nightly'
      with:
        command:  check
        args: --benches

    - name: tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --all

    - name: clipy
      uses: actions-rs/cargo@v1
      if: matrix.os == 'ubuntu-latest' && matrix.rust=='stable'
      with:
          command: clippy
          args: --all --tests --benches -- -D warnings

    - name: build release
      uses: actions-rs/cargo@v1
      if: matrix.os != 'windows-latest' && matrix.rust=='stable' && github.ref_name=='main'
      with:
        command: build
        args: --release
    
    - name: Get current iroh-gateway version
      id: ig_version
      if: matrix.os != 'windows-latest' && matrix.rust=='stable' && github.ref_name=='main'
      uses: dante-signal31/rust-app-version@v1.0.0
      with:
         cargo_toml_folder: iroh-gateway/

    - name: Setup awscli on mac
      if: matrix.os == 'macos-latest' && matrix.rust=='stable' && github.ref_name=='main'
      run: |
        curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
        sudo installer -pkg AWSCLIV2.pkg -target /

    - name: Set aws credentials
      if: matrix.os != 'windows-latest'
      run: |
          echo "AWS_ACCESS_KEY_ID=${{secrets.S3_ACCESS_KEY_ID}}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{secrets.S3_ACCESS_KEY}}" >> $GITHUB_ENV

    - name: push release iroh-gateway linux
      uses: prewk/s3-cp-action@v2
      if: matrix.os == 'ubuntu-latest' && matrix.rust=='stable' && github.ref_name=='main'
      with:
        aws_access_key_id: ${{ secrets.S3_ACCESS_KEY_ID }}
        aws_secret_access_key: ${{ secrets.S3_ACCESS_KEY }}
        source: './target/release/iroh-gateway'
        dest: 's3://vorc/iroh-gateway-${RELEASE_ARCH}-amd64-${{ steps.ig_version.outputs.app_version }}-${GITHUB_SHA::7}'

    - name: push release iroh-gateway latest linux
      uses: prewk/s3-cp-action@v2
      if: matrix.os == 'ubuntu-latest' && matrix.rust=='stable' && github.ref_name=='main'
      with:
        aws_access_key_id: ${{ secrets.S3_ACCESS_KEY_ID }}
        aws_secret_access_key: ${{ secrets.S3_ACCESS_KEY }}
        source: './target/release/iroh-gateway'
        dest: 's3://vorc/iroh-gateway-${RELEASE_ARCH}-amd64-latest'

    - name: push release iroh-gateway macos
      if: matrix.os == 'macos-latest' && matrix.rust=='stable' && github.ref_name=='main'
      run: aws s3 cp ./target/release/iroh-gateway s3://vorc/iroh-gateway-${RELEASE_ARCH}-x86_64-${{ steps.ig_version.outputs.app_version }}-${GITHUB_SHA::7} --no-progress
    
    - name: push release iroh-gateway latest macos
      if: matrix.os == 'macos-latest' && matrix.rust=='stable' && github.ref_name=='main'
      run: aws s3 cp ./target/release/iroh-gateway s3://vorc/iroh-gateway-${RELEASE_ARCH}-x86_64-latest --no-progress
    
    - name: Print sccache stats
      run: sccache --show-stats
    - name: Stop sccache server
      run: sccache --stop-server || true

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check