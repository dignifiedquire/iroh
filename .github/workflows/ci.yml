name: CI

on:
  pull_request:
    types: [ 'labeled', 'unlabeled', 'opened', 'synchronize', 'reopened' ]
  merge_group:
  push:
    branches:
      - main

concurrency:
  group: ci-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  RUST_BACKTRACE: 1
  RUSTFLAGS: -Dwarnings
  RUSTDOCFLAGS: -Dwarnings
  MSRV: "1.76"
  SCCACHE_CACHE_SIZE: "50G"
  IROH_FORCE_STAGING_RELAYS: "1"

jobs:
  tests:
    name: CI Test Suite
    if: "github.event_name != 'pull_request' || ! contains(github.event.pull_request.labels.*.name, 'flaky-test')"
    uses: './.github/workflows/tests.yaml'

  cross_build:
    name: Cross Build Only
    if: "github.event_name != 'pull_request' || ! contains(github.event.pull_request.labels.*.name, 'flaky-test')"
    timeout-minutes: 30
    runs-on: [self-hosted, linux, X64]
    strategy:
      fail-fast: false
      matrix:
        target:
           # cross tests are currently broken vor armv7 and aarch64
           # see https://github.com/cross-rs/cross/issues/1311
          # - armv7-linux-androideabi
          # - aarch64-linux-android
          # Freebsd execution fails in cross
          # - i686-unknown-freebsd # Linking fails :/
          - x86_64-unknown-freebsd
          # Netbsd execution fails to link in cross
          # - x86_64-unknown-netbsd
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Cleanup Docker
      continue-on-error: true
      run: |
        docker kill $(docker ps -q)

      # See https://github.com/cross-rs/cross/issues/1222
    - uses: taiki-e/install-action@cross

    - name: build
      # cross tests are currently broken vor armv7 and aarch64
      # see https://github.com/cross-rs/cross/issues/1311.  So on
      # those platforms we only build but do not run tests.
      run: cross build --all --target ${{ matrix.target }}
      env:
        RUST_LOG: ${{ runner.debug && 'TRACE' || 'DEBUG'}}

  android_build:
    name: Android Build Only
    if: "github.event_name != 'pull_request' || ! contains(github.event.pull_request.labels.*.name, 'flaky-test')"
    timeout-minutes: 30
    # runs-on: ubuntu-latest
    runs-on: [self-hosted, linux, X64]
    strategy:
      fail-fast: false
      matrix:
        target:
          - aarch64-linux-android
          - armv7-linux-androideabi
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        target: ${{ matrix.target }}
    - name: Install rustup target
      run: rustup target add ${{ matrix.target }}

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Setup Android NDK
      uses: arqu/setup-ndk@main
      id: setup-ndk
      with:
        ndk-version: r23
        add-to-path: true

    - name: Build
      env:
        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
      run: |
        cargo install --version 3.5.4 cargo-ndk
        cargo ndk --target ${{ matrix.target }} build

  cross_test:
    name: Cross Test
    if: "github.event_name != 'pull_request' || ! contains(github.event.pull_request.labels.*.name, 'flaky-test')"
    timeout-minutes: 30
    runs-on: [self-hosted, linux, X64]
    strategy:
      fail-fast: false
      matrix:
        target:
          - i686-unknown-linux-gnu
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Cleanup Docker
      continue-on-error: true
      run: |
        docker kill $(docker ps -q)

      # See https://github.com/cross-rs/cross/issues/1222
    - uses: taiki-e/install-action@cross

    - name: test
      run: cross test --all --target ${{ matrix.target }} -- --test-threads=12
      env:
        RUST_LOG: ${{ runner.debug && 'TRACE' || 'DEBUG' }}


  wasm_build:
    name: Build wasm32
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Add wasm target
        run: rustup target add wasm32-unknown-unknown

      - name: wasm32 build (iroh-base)
        run: cargo build -p iroh-base --all-features --target wasm32-unknown-unknown

  check_semver:
    runs-on: ubuntu-latest
    env:
      RUSTC_WRAPPER: "sccache"
      SCCACHE_GHA_ENABLED: "on"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install sccache
        uses: mozilla-actions/sccache-action@v0.0.6

      - name: Setup Environment (PR)
        if: ${{ github.event_name == 'pull_request' }}
        shell: bash
        run: |
          echo "HEAD_COMMIT_SHA=$(git rev-parse origin/${{ github.base_ref }})" >> ${GITHUB_ENV}
      - name: Setup Environment (Push)
        if: ${{ github.event_name == 'push' || github.event_name == 'merge_group' }}
        shell: bash
        run: |
          echo "HEAD_COMMIT_SHA=$(git rev-parse origin/main)" >> ${GITHUB_ENV}
      - name: Check semver
        # uses: obi1kenobi/cargo-semver-checks-action@v2
        uses: n0-computer/cargo-semver-checks-action@feat-baseline
        with:
          package: iroh, iroh-base, iroh-cli, iroh-dns-server, iroh-metrics, iroh-net, iroh-net-bench, iroh-router, netwatch, portmapper
          baseline-rev: ${{ env.HEAD_COMMIT_SHA }}
          use-cache: false

  check_fmt:
    timeout-minutes: 30
    name: Checking fmt
    runs-on: ubuntu-latest
    env:
      RUSTC_WRAPPER: "sccache"
      SCCACHE_GHA_ENABLED: "on"
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    - uses: mozilla-actions/sccache-action@v0.0.6
    - uses: taiki-e/install-action@cargo-make
    - run: cargo make format-check

  check_docs:
    timeout-minutes: 30
    name: Checking docs
    runs-on: ubuntu-latest
    env:
      RUSTC_WRAPPER: "sccache"
      SCCACHE_GHA_ENABLED: "on"
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@master
      with:
        toolchain: nightly-2024-05-02
    - name: Install sccache
      uses: mozilla-actions/sccache-action@v0.0.6

    - name: Docs
      run: cargo doc --workspace --all-features --no-deps --document-private-items
      env:
        RUSTDOCFLAGS: --cfg docsrs

  clippy_check:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    env:
      RUSTC_WRAPPER: "sccache"
      SCCACHE_GHA_ENABLED: "on"
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
    - name: Install sccache
      uses: mozilla-actions/sccache-action@v0.0.6

    # TODO: We have a bunch of platform-dependent code so should
    #    probably run this job on the full platform matrix
    - name: clippy check (all features)
      run: cargo clippy --workspace --all-features --all-targets --bins --tests --benches

    - name: clippy check (no features)
      run: cargo clippy --workspace --no-default-features --lib --bins --tests

    - name: clippy check (default features)
      run: cargo clippy --workspace --all-targets

  msrv:
    if: "github.event_name != 'pull_request' || ! contains(github.event.pull_request.labels.*.name, 'flaky-test')"
    timeout-minutes: 30
    name: Minimal Supported Rust Version
    runs-on: ubuntu-latest
    env:
      RUSTC_WRAPPER: "sccache"
      SCCACHE_GHA_ENABLED: "on"
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ env.MSRV }}
    - name: Install sccache
      uses: mozilla-actions/sccache-action@v0.0.6

    - name: Check MSRV all features
      run: |
        cargo +$MSRV check --workspace --all-targets

  cargo_deny:
    timeout-minutes: 30
    name: cargo deny
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: EmbarkStudios/cargo-deny-action@v2
        with:
          arguments: --workspace --all-features
          command: check
          command-arguments: "-Dwarnings"

  netsim-integration-tests:
    permissions: write-all
    if: "github.event_name != 'pull_request' || ! contains(github.event.pull_request.labels.*.name, 'flaky-test')"
    uses: './.github/workflows/netsim_runner.yaml'
    secrets: inherit
    with:
      branch: ${{ github.ref }}
      max_workers: 4
      netsim_branch: "main"
      sim_paths: "sims/iroh/iroh.json,sims/integration"
      pr_number: ${{ github.event.pull_request.number || '' }}

  docker_build_and_test:
    name: Docker Test
    if: "github.event_name != 'pull_request' || ! contains(github.event.pull_request.labels.*.name, 'flaky-test')"
    timeout-minutes: 30
    runs-on: [self-hosted, linux, X64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Install sccache
        uses: mozilla-actions/sccache-action@v0.0.6

      - name: Prep
        run: sudo apt-get install musl-tools -y

      - name: Build iroh
        run: cargo build --profile=dev-ci --all-features --bin iroh --target x86_64-unknown-linux-musl

      - name: Prep bins
        run: |
          mkdir -p bins/linux/amd64
          cp target/x86_64-unknown-linux-musl/dev-ci/iroh bins/linux/amd64/iroh

      - name: Cleanup Docker
        continue-on-error: true
        run: |
          docker kill $(docker ps -q)

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          tags: n0computer/iroh-test:latest
          target: iroh
          platforms: linux/amd64
          file: docker/Dockerfile.ci

      - name: Run Docker image & stats test
        run: |
          docker run -p 9090:9090 -p 4919:4919/udp -Pd n0computer/iroh-test:latest --rpc-addr 0.0.0.0:4919 start
          # Give the server time to start
          sleep 3
          target/x86_64-unknown-linux-musl/dev-ci/iroh --rpc-addr 127.0.0.1:4919 stats

  codespell:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: pip install --user codespell[toml]
    - run: codespell --ignore-words-list=ans,atmost,crate,inout,ratatui,ser,stayin,swarmin,worl --skip=CHANGELOG.md


  build_release:
        timeout-minutes: 60
        name: Build release binaries
        # needs: create-release
        runs-on: ${{ matrix.runner }}
        outputs:
          # release_version: ${{ needs.create-release.outputs.release_version }}
          base_hash: ${{ steps.define_hash.outputs.base_hash }}
        continue-on-error: false
        strategy:
          fail-fast: false
          matrix:
            name: [ubuntu-latest, ubuntu-arm-latest, macOS-latest, macOS-arm-latest, windows-latest]
            rust: [stable]
            experimental: [false]
            include:
              - name: ubuntu-arm-latest
                os: ubuntu-latest
                release-os: linux
                release-arch: aarch64
                cargo_targets: "aarch64-unknown-linux-musl"
                runner: [self-hosted, linux, ARM64]
              - name: ubuntu-latest
                os: ubuntu-latest
                release-os: linux
                release-arch: amd64
                cargo_targets: "x86_64-unknown-linux-musl"
                runner: [self-hosted, linux, X64]
              - name: macOS-latest
                os: macOS-latest
                release-os: darwin
                release-arch: x86_64
                cargo_targets: "x86_64-apple-darwin"
                runner: [self-hosted, macOS, ARM64]
              - name: macOS-arm-latest
                os: macOS-latest
                release-os: darwin
                release-arch: aarch64
                cargo_targets: "aarch64-apple-darwin"
                runner: [self-hosted, macOS, ARM64]
              - name: windows-latest
                os: windows-latest
                release-os: windows
                release-arch: amd64
                cargo_targets: "x86_64-pc-windows-msvc"
                runner: [self-hosted, windows, X64]
        env:
          # Using self-hosted runners so use local cache for sccache and
          # not SCCACHE_GHA_ENABLED.
          # RUSTC_WRAPPER: "sccache"
          RUST_BACKTRACE: full
          RUSTV: ${{ matrix.rust }}
          RELEASE_VERSION: "v0.28.1"
        steps:
        # - name: Checkout
        #   if: inputs.base_hash == ''
        #   uses: actions/checkout@v4
        #   with:
        #     submodules: recursive
        
        - name: Checkout specified commit
          uses: actions/checkout@v4
          with:
            ref: "30e3cb34aa7f8dee4c8b1077fbc969c880a39a13"
            submodules: recursive
    
        - name: Set build arch
          run: |
            echo "RELEASE_ARCH=${{ matrix.release-arch }}" >> $GITHUB_ENV
            echo "RELEASE_OS=${{ matrix.release-os }}" >> $GITHUB_ENV
        
        - name: Define hash
          if: matrix.os == 'ubuntu-latest'
          id: define_hash
          run: |
            echo "base_hash=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

        - name: Ensure musl support
          if: ${{ contains(matrix.cargo_targets, '-musl') }}
          run: sudo apt-get install musl-tools -y
    
        - name: Install Rust
          if: matrix.os != 'windows-latest'
          uses: dtolnay/rust-toolchain@stable
          with:
            toolchain: ${{ matrix.rust }}
            targets: ${{ matrix.cargo_targets }}

        - name: Install Rust
          if: matrix.os == 'windows-latest'
          run: |
            rustup toolchain install stable
            rustup target add ${{ matrix.cargo_targets }}
    
        - name: build release
          if: matrix.os != 'windows-latest'
          shell: bash
          run: |
            if [ "${{ matrix.name }}" = "ubuntu-arm-latest" ]; then
              export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc
              export CC=aarch64-linux-gnu-gcc
            fi
            cargo build --profile optimized-release --all-features --target ${{ matrix.cargo_targets }}
        
        - name: build release
          if: matrix.os == 'windows-latest'
          run: cargo build --profile optimized-release --all-features --target ${{ matrix.cargo_targets }}
            
        - name: attach artifacts
          if: matrix.os != 'windows-latest'
          uses: actions/upload-artifact@v4
          with:
            name: iroh-${{env.RELEASE_OS }}-${{env.RELEASE_ARCH}}
            path: target/${{ matrix.cargo_targets }}/optimized-release/iroh
            compression-level: 0
        
        - name: attach artifacts
          if: matrix.os == 'windows-latest'
          uses: actions/upload-artifact@v4
          with:
            name: iroh-windows-amd64.exe
            path: target/${{ matrix.cargo_targets }}/optimized-release/iroh.exe
            compression-level: 0
    
        - name: Setup awscli on linux
          if: matrix.name == 'ubuntu-latest'
          run: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install --update
    
        - name: Setup awscli on linux
          if: matrix.name == 'ubuntu-arm-latest'
          run: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install --update
    
        - name: Setup awscli on mac
          if: matrix.os == 'macos-latest'
          run: |
            curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
            sudo installer -pkg AWSCLIV2.pkg -target /
    
        - name: Set aws credentials
          if: matrix.os != 'windows-latest'
          run: |
              echo "AWS_ACCESS_KEY_ID=${{secrets.S3_ACCESS_KEY_ID}}" >> $GITHUB_ENV
              echo "AWS_SECRET_ACCESS_KEY=${{secrets.S3_ACCESS_KEY}}" >> $GITHUB_ENV
              echo "AWS_DEFAULT_REGION=us-west-2" >> $GITHUB_ENV
    
        - name: push release
          if: matrix.os != 'windows-latest'
          run: |
            aws s3 cp ./target/${{ matrix.cargo_targets }}/optimized-release/iroh s3://vorc/iroh-${RELEASE_OS}-${RELEASE_ARCH}-${GITHUB_SHA::7} --no-progress
            aws s3 cp ./target/${{ matrix.cargo_targets }}/optimized-release/iroh-relay s3://vorc/iroh-relay-${RELEASE_OS}-${RELEASE_ARCH}-${GITHUB_SHA::7} --no-progress
            aws s3 cp ./target/${{ matrix.cargo_targets }}/optimized-release/iroh-dns-server s3://vorc/iroh-dns-server-${RELEASE_OS}-${RELEASE_ARCH}-${GITHUB_SHA::7} --no-progress
    
        - name: push release latest
          if: matrix.os != 'windows-latest'
          run: |
            aws s3 cp ./target/${{ matrix.cargo_targets }}/optimized-release/iroh s3://vorc/iroh-${RELEASE_OS}-${RELEASE_ARCH}-latest --no-progress
            aws s3 cp ./target/${{ matrix.cargo_targets }}/optimized-release/iroh-relay s3://vorc/iroh-relay-${RELEASE_OS}-${RELEASE_ARCH}-latest --no-progress
            aws s3 cp ./target/${{ matrix.cargo_targets }}/optimized-release/iroh-dns-server s3://vorc/iroh-dns-server-${RELEASE_OS}-${RELEASE_ARCH}-latest --no-progress

        - name: Build archives
          if: matrix.os != 'windows-latest'
          shell: bash
          run: |
            IFS=',' read -ra BIN_NAMES <<< "${{ env.BIN_NAMES }}"
            ASSETS=""
            for BIN_NAME in "${BIN_NAMES[@]}"; do
              staging="$BIN_NAME-v0.28.1-${{ matrix.cargo_targets }}"
              mkdir -p "$staging"
              cp "target/${{ matrix.cargo_targets }}/optimized-release/$BIN_NAME" "$staging/"
              tar czf "$staging.tar.gz" -C "$staging" .
              ASSETS+="$staging.tar.gz,"
            done
            echo "ASSET=$(echo $ASSETS | sed 's/,$//')" >> $GITHUB_ENV

        - name: Build archives (windows)
          if: matrix.os == 'windows-latest'
          shell: pwsh
          run: |
            $BIN_NAMES = "${{ env.BIN_NAMES }}".Split(',')
            $ASSETS = @()
            foreach ($BIN_NAME in $BIN_NAMES) {
              $staging = "$BIN_NAME-v0.28.1-${{ matrix.cargo_targets }}"
              New-Item -ItemType Directory -Force -Path "$staging"
              Copy-Item -Path "target/${{ matrix.cargo_targets }}/optimized-release/$BIN_NAME.exe" -Destination "$staging/"
              Set-Location -Path "$staging"
              Compress-Archive -Path * -DestinationPath "../$staging.zip"
              $ASSETS += "$staging.zip"
              Set-Location -Path ..
            }
            $ASSETS = $ASSETS -join ','
            Add-Content -Path $env:GITHUB_ENV -Value "ASSET=$ASSETS"

        # - uses: n0-computer/actions-upload-release-asset@main
        #   if: (github.event.inputs.upload_artifacts == 'true' || github.event_name == 'push')
        #   with:
        #     upload_url: ${{ github.event.inputs.upload_url || needs.create-release.outputs.upload_url }}
        #     asset_path: ${{ env.ASSET }}

        - name: attach artifacts
          uses: actions/upload-artifact@v4
          with:
            name: iroh-${{env.RELEASE_OS }}-${{env.RELEASE_ARCH}}-bundle
            path: iroh-*{.tar.gz,.zip}
            compression-level: 0