name: Continuous integration

on:
  pull_request:
  push:
    branches:
      - main
      - staging
      - trying

jobs:
  build_and_test:
    name: Build and test
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        rust: [stable]
        experimental: [false]
        include:
          - os: ubuntu-latest
            sccache-path: /home/runner/.cache/sccache
            release-os: linux
            release-arch: amd64
          - os: macos-latest
            sccache-path: /Users/runner/Library/Caches/Mozilla.sccache
            release-os: darwin
            release-arch: x86_64
          - os: windows-latest
            sccache-path: "%LOCALAPPDATA%\\sccache"
            release-os: windows
            release-arch: amd64
    env:
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
      RUSTV: ${{ matrix.rust }}
      SCCACHE_CACHE_SIZE: 2G
      # SCCACHE_RECACHE: 1 # Uncomment this to clear cache, then comment it back out
    steps:
    - uses: actions/checkout@master

    - name: Set sccache env path
      if: matrix.os != 'windows-latest'
      run: |
          echo "SCCACHE_DIR=${{ matrix.sccache-path }}" >> $GITHUB_ENV
    - name: Set build arch
      run: |
        echo "RELEASE_ARCH=${{ matrix.release-arch }}" >> $GITHUB_ENV
        echo "RELEASE_OS=${{ matrix.release-os }}" >> $GITHUB_ENV
    
    - name: Claim back some disk space (ubuntu-latest)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"

    - name: Install sccache (ubuntu-latest)
      if: matrix.os == 'ubuntu-latest'
      env:
        LINK: https://github.com/mozilla/sccache/releases/download
        SCCACHE_VERSION: v0.2.15
      run: |
        SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl
        mkdir -p $HOME/.local/bin
        curl -L "$LINK/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz" | tar xz
        mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
        chmod 755 $HOME/.local/bin/sccache
        echo "$HOME/.local/bin" >> $GITHUB_PATH  
    
    - name: Install scoop (windows-latest)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
        iwr -useb get.scoop.sh -outfile 'install.ps1'
        .\\install.ps1 -RunAsAdmin
        Join-Path (Resolve-Path ~).Path "scoop\shims" >> $Env:GITHUB_PATH
    
    - name: Install sccache (windows-latest)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: scoop install sccache
    
    - name: Install sccache (macos-latest)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install sccache          
    
    - name: Install ${{ matrix.rust }}
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        override: true
    
    - name: Cache cargo registry
      uses: actions/cache@v2
      continue-on-error: false
      with:
        path: |
          ~/.cargo/registry          
          ~/.cargo/bin
          ~/.cargo/registry/index
          ~/.cargo/registry/cache
          ~/.cargo/git
          ~/.cargo/.crates.toml
          ~/.cargo/.crates2.json
          ./target
            
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
                      ${{ runner.os }}-${{ matrix.rust }}-cargo-
    - name: Save sccache
      uses: actions/cache@v2
      continue-on-error: false
      with:
        path: ${{ matrix.sccache-path }}
        key: ${{ runner.os }}-${{ matrix.rust }}-sccache-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
                      ${{ runner.os }}-${{ matrix.rust }}-sccache-
    - name: Start sccache server
      run: sccache --start-server

    - name: Install Protoc
      uses: arduino/setup-protoc@v1
      with:
        version: '3.20.1'
        repo-token: ${{ secrets.GITHUB_TOKEN }}

    - name: check
      uses: actions-rs/cargo@v1
      with:
        command: check
        args: --all --bins --tests --examples

    - name: tests
      uses: actions-rs/cargo@v1
      timeout-minutes: 30
      env:
        # need this b/c our lock test uses a fork
        # https://github.com/rails/rails/issues/38560
        OBJC_DISABLE_INITIALIZE_FORK_SAFETY: YES
      with:
        command: test
        args: --all -j 4

    - name: clipy
      uses: actions-rs/cargo@v1
      if: matrix.os == 'ubuntu-latest' && matrix.rust=='stable'
      with:
          command: clippy
          args: --all --tests --benches --all-targets -- -D warnings

    - name: build release
      uses: actions-rs/cargo@v1
      if: matrix.rust=='stable' && github.ref_name=='main'
      with:
        command: build
        args: --profile ci
    
    - name: Install rust toolchain
      uses: actions-rs/toolchain@v1
      if: matrix.rust=='stable' && matrix.os == 'macOS-latest' && github.ref_name=='main'
      with:
        profile: minimal
        override: true
        default: true
        toolchain: ${{ matrix.rust }}
        target: aarch64-apple-darwin
    
    - name: build release
      uses: actions-rs/cargo@v1
      if: matrix.rust=='stable' && matrix.os == 'macOS-latest' && github.ref_name=='main'
      with:
        command: build
        args: --profile ci --target aarch64-apple-darwin

    - name: Setup awscli on mac
      if: matrix.os == 'macos-latest' && matrix.rust=='stable' && github.ref_name=='main'
      run: |
        curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
        sudo installer -pkg AWSCLIV2.pkg -target /

    - name: Setup awscli on linux
      if: matrix.os == 'ubuntu-latest' && matrix.rust=='stable' && github.ref_name=='main'
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update

    - name: Set aws credentials
      if: matrix.os != 'windows-latest'
      run: |
          echo "AWS_ACCESS_KEY_ID=${{secrets.S3_ACCESS_KEY_ID}}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{secrets.S3_ACCESS_KEY}}" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=us-west-2" >> $GITHUB_ENV

    - name: push release
      if: matrix.os == 'macOS-latest' && matrix.rust=='stable' && github.ref_name=='main'
      run: |
        aws s3 cp ./target/ci/iroh-gateway s3://vorc/iroh-gateway-${RELEASE_OS}-${RELEASE_ARCH}-${GITHUB_SHA::7} --no-progress
        aws s3 cp ./target/ci/iroh-p2p s3://vorc/iroh-p2p-${RELEASE_OS}-${RELEASE_ARCH}-${GITHUB_SHA::7} --no-progress
        aws s3 cp ./target/ci/iroh-store s3://vorc/iroh-store-${RELEASE_OS}-${RELEASE_ARCH}-${GITHUB_SHA::7} --no-progress
        aws s3 cp ./target/ci/iroh s3://vorc/iroh-${RELEASE_OS}-${RELEASE_ARCH}-${GITHUB_SHA::7} --no-progress

    - name: push release latest
      if: matrix.os != 'macOS-latest' && matrix.rust=='stable' && github.ref_name=='main'
      run: |
        aws s3 cp ./target/ci/iroh-gateway s3://vorc/iroh-gateway-${RELEASE_OS}-${RELEASE_ARCH}-latest --no-progress
        aws s3 cp ./target/ci/iroh-p2p s3://vorc/iroh-p2p-${RELEASE_OS}-${RELEASE_ARCH}-latest --no-progress
        aws s3 cp ./target/ci/iroh-store s3://vorc/iroh-store-${RELEASE_OS}-${RELEASE_ARCH}-latest --no-progress
        aws s3 cp ./target/ci/iroh s3://vorc/iroh-${RELEASE_OS}-${RELEASE_ARCH}-latest --no-progress
    
    - name: Print sccache stats
      run: sccache --show-stats
    - name: Stop sccache server
      run: sccache --stop-server || true

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check