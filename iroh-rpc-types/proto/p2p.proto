syntax = "proto3";

package p2p;

import "google/protobuf/empty.proto";

service P2p {
  rpc Version(google.protobuf.Empty) returns (VersionResponse) {}
  rpc LocalPeerId(google.protobuf.Empty) returns (PeerIdResponse) {}
  rpc ExternalAddrs(google.protobuf.Empty) returns (Multiaddrs) {}
  rpc Listeners(google.protobuf.Empty) returns (Multiaddrs) {}
  rpc FetchBitswap(BitswapRequest) returns (BitswapResponse) {}
  rpc FetchProviderDht(Key) returns (stream Providers) {}
  rpc NotifyNewBlocksBitswap(NotifyNewBlocksBitswapRequest) returns (google.protobuf.Empty) {}
  rpc StopSessionBitswap(StopSessionBitswapRequest) returns (google.protobuf.Empty) {}
  rpc StartProviding(Key) returns (google.protobuf.Empty) {}
  rpc StopProviding(Key) returns (google.protobuf.Empty) {}
  rpc GetListeningAddrs(google.protobuf.Empty) returns (GetListeningAddrsResponse) {}
  rpc GetPeers(google.protobuf.Empty) returns (GetPeersResponse) {}
  rpc PeerConnect(ConnectRequest) returns (google.protobuf.Empty) {}
  rpc PeerConnectByPeerId(ConnectByPeerIdRequest) returns (google.protobuf.Empty) {}
  rpc PeerDisconnect(DisconnectRequest) returns (google.protobuf.Empty) {}
  rpc Shutdown(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc Lookup(LookupRequest) returns (PeerInfo) {}

  rpc GossipsubAddExplicitPeer(GossipsubPeerIdMsg) returns (google.protobuf.Empty) {}
  rpc GossipsubAllMeshPeers(google.protobuf.Empty) returns (GossipsubPeersResponse) {}
  rpc GossipsubAllPeers(google.protobuf.Empty) returns (GossipsubAllPeersResponse) {}
  rpc GossipsubMeshPeers(GossipsubTopicHashMsg) returns (GossipsubPeersResponse) {}
  rpc GossipsubPublish(GossipsubPublishRequest) returns (GossipsubPublishResponse) {}
  rpc GossipsubRemoveExplicitPeer(GossipsubPeerIdMsg) returns (google.protobuf.Empty) {}
  rpc GossipsubSubscribe(GossipsubTopicHashMsg) returns (GossipsubSubscribeResponse) {}
  rpc GossipsubTopics(google.protobuf.Empty) returns (GossipsubTopicsResponse) {}
  rpc GossipsubUnsubscribe(GossipsubTopicHashMsg) returns (GossipsubSubscribeResponse) {}
}

message VersionResponse {
  string version = 1;
}

message PeerIdResponse {
  bytes peer_id = 1;
}

message BitswapRequest {
  // Serialized CID of the requested block.
  bytes cid = 1;
  Providers providers = 2;
  uint64 ctx = 3;
}

message StopSessionBitswapRequest {
  uint64 ctx = 1;
}

message BitswapResponse {
  bytes data = 1;
  uint64 ctx = 2;
}

message Providers {
  // List of providers. Serialized PeerIds
  repeated bytes providers = 1;
}

message BitswapProviders {
  uint64 ctx = 1;
  // List of providers. Serialized PeerIds
  repeated bytes providers = 2;
}

message Key {
  bytes key = 1;
}

message NotifyNewBlocksBitswapRequest {
  // Serialized CID of the requested block.
  repeated BitswapBlock blocks = 1;
}

message BitswapBlock {
  bytes cid = 1;
  bytes data = 2;
}

message GetListeningAddrsResponse {
  // Serialized peer id
  bytes peer_id = 1;
  // Serialized list of multiaddrs
  repeated bytes addrs = 2;
}

message GetPeersResponse {
  // map of peer ids to a list of multiaddrs
  // gRpc maps cannot have `bytes` as a key, so using `string` instead
  // gRpc maps cannot have `repeated` as part of the value, so abstrating
  // the list of serialized Multiaddr as a protobuf type `Multiaddrs`
  map<string, Multiaddrs> peers = 1;
}

message ConnectByPeerIdRequest {
  bytes peer_id = 1;
}

message ConnectRequest {
  // Serialized PeerId
  bytes peer_id = 1;
  // Serialized multiaddr
  repeated bytes addrs = 2;
}

message DisconnectRequest {
  // Serialized peer id
  bytes peer_id = 1;
}

message LookupRequest {
  // PeerId
  bytes peer_id = 1;
  // Serialized multiaddr
  optional bytes addr = 2;
}

message PeerInfo {
  // PublicKey
  bytes peer_id = 1;
  // String
  string protocol_version = 2;
  // string
  string agent_version = 3;
  // vec of Multiaddrs
  repeated bytes listen_addrs = 4;
  // vec of Strings
  repeated string protocols = 5;
  // Multiaddr
  bytes observed_addr = 6;
}
message Multiaddrs {
  // Serialized list of multiaddrs
  repeated bytes addrs = 1;
}

message GossipsubPeerIdMsg {
  // Serialized PeerId
  bytes peer_id = 1;
}

message GossipsubTopicHashMsg {
  // Serialized topic hash
  string topic_hash = 1;
}

message GossipsubPublishRequest {
  // Serialized topic hash
  string topic_hash = 1;
  // Bytes of data to publish
  bytes data = 2;
}

message GossipsubPublishResponse {
  // Serialized message Gossipsubid
  bytes message_id = 1;
}

message GossipsubSubscribeResponse {
  bool was_subscribed = 1;
}

message GossipsubAllPeersResponse {
  repeated GossipsubPeerAndTopics all = 1;
}

message GossipsubPeerAndTopics {
  bytes peer_id = 1;
  repeated string topics = 2;
}

message GossipsubPeersResponse {
  // List of PeerIds
  repeated bytes peers = 1;
}

message GossipsubTopicsResponse {
  // List of topics
  repeated string topics = 1;
}

